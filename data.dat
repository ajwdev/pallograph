start;

insert corev1::Selectors(selectors::LabelSelector{[("app","test")], []});

insert_or_update corev1::Pod[corev1::Pod{
  metav1::ObjectMeta{"test", "test1", [("app","test")], []},
  corev1::PodSpec{"node0"},
  corev1::PodStatus{corev1::Running}
}];
insert_or_update corev1::Pod[corev1::Pod{
  metav1::ObjectMeta{"test", "test2", [("app","test")], []},
  corev1::PodSpec{"node0"},
  corev1::PodStatus{corev1::Running}
}];
insert_or_update corev1::Pod[corev1::Pod{
  metav1::ObjectMeta{"kube-system", "test", [("app","test"),("foo","bar")], []},
  corev1::PodSpec{"node0"},
  corev1::PodStatus{corev1::Running}
}];

insert_or_update appsv1::ReplicaSet[appsv1::ReplicaSet{
  metav1::ObjectMeta{"test", "test2", [("app","test")], []},
  appsv1::ReplicaSetSpec{selectors::LabelSelector{[("app","test")], []}},
  appsv1::ReplicaSetStatus{}
}];

insert_or_update corev1::Service[corev1::Service{
  metav1::ObjectMeta{"test", "test2", [], []},
  corev1::ServiceSpec{corev1::ClusterIP, selectors::LabelSelector{[("app","test")], []}},
  corev1::ServiceStatus{}
}];

insert_or_update corev1::Service[corev1::Service{
  metav1::ObjectMeta{"test", "ingress", [], []},
  corev1::ServiceSpec{corev1::LoadBalancer, selectors::LabelSelector{[("app","ingress")], []}},
  corev1::ServiceStatus{}
}];

insert_or_update networkingv1::Ingress[networkingv1::Ingress{
  metav1::ObjectMeta{"test", "ingress", [], []},
  networkingv1::IngressSpec{"default-class", [networkingv1::IngressRule{"example.com", "test2"}]},
  networkingv1::IngressStatus{}
}];

insert IngressController("test", "ingress", "default-class");

commit;

dump NodesInUse;

echo IngressToService;
dump networkingv1::IngressToService;

echo Public Service;
dump IsPublic;

echo
MatchesPods;
dump corev1::MatchesPod;

echo MatchesPods Index;
query_index corev1::MatchesPod(selectors::LabelSelector{[("app","test")], []}, "test");
echo MatchesPodsAll Index;
query_index corev1::MatchesPodAll(selectors::LabelSelector{[("app","test")], []});

echo ReplicaSet Matches;
dump appsv1::ReplicaSetMatchesPod;

